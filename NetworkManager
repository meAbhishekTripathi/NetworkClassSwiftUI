//
//  NetworkManager.swift
//  Created by Abhishek Tripathi on 13/11/23.
//

import Foundation

class NetworkManager : ObservableObject{
    
    static let shared = NetworkManager()
    
    //This data will be used in swiftUI view to parse the response according to structure
    @Published var dataToPublish : Data?
    
    //This error will be used in swiftUI view to get the error
    @Published var errorToPublish : Error?
    
  
    var methodType : HttpMethod = .Get
    let BASE_URL = "https://api.coingecko.com/api/v3/"
    
    @MainActor
    //This is example function that you can call according to your use
    func fetchCoinAsync(apiEndPoint:String,params:[String:Any],method:String) async throws{
        do{
            let urlString: String = "\(BASE_URL)\(apiEndPoint)"
            
            guard let url = URL(string: urlString) else { throw CoinError.invalidURL }
            var urlRequest = URLRequest(url: url)
            urlRequest.httpMethod = methodType.rawValue
            if methodType.rawValue != "GET"{
            urlRequest.httpBody = try JSONSerialization.data(withJSONObject: params)
            }else{
                let queryItems = params.map{
                    return URLQueryItem(name: "\($0)", value: "\($1)")
                }
                urlRequest.url?.append(queryItems: queryItems)
            }
            try await sendRequest(urlReq: urlRequest)
        }catch{
            errorToPublish = error
        }
    }
    
    //MARK: - NetworkCall for URLSession
    fileprivate func sendRequest(urlReq:URLRequest) async throws{
        do{
            let (data,response) = try await URLSession.shared.data(for: urlReq)
            guard (response as? HTTPURLResponse)?.statusCode == 200 else {throw CoinError.serverError}
            self.dataToPublish = data
        }catch{
            errorToPublish = error
        }
    }
}


enum HttpMethod : String {
    case Get = "GET"
    case Post = "POST"
    case Delete = "DELETE"
    case Put = "PUT"
}

enum CoinError: Error, LocalizedError {
    case invalidURL
    case serverError
    case invalidData
    case unkown(Error)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return ""
        case .serverError:
            return "There was an error with the server. Please try again later"
        case .invalidData:
            return "The coin data is invalid. Please try again later"
        case .unkown(let error):
            return error.localizedDescription
        }
    }
}
