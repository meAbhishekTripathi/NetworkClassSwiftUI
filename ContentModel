
//
//  ContentViewModel.swift
//  CryptoAsyncAwait
//
//  Created by Stephan Dowless on 1/5/23.
//

import Foundation

class ContentViewModel: ObservableObject {
    @Published var coins = [Coin]()
    @Published var error : Error?
    private let pageLimit = 20
    private var pageNo = 0
    
    init()  {
       loadData()
    }
    
    func refreshData(){
        coins.removeAll()
        pageNo = 0
        loadData()
    }
}
//MARK: - Asynh Call

extension ContentViewModel{
    @MainActor
    func fetchCoinAsync() async throws{
        do{
            pageNo += 1
            let params : [String:Any] = ["vs_currency":"usd","order":"market_cap_desc","per_page":20,"page":0,"price_change_percentage" : "24h"]
            try await NetworkManager.shared.fetchCoinAsync(apiEndPoint: "coins/markets", params: params, method: "GET")
            guard let data = NetworkManager.shared.dataToPublish else {
                throw CoinError.serverError
            }
            guard let coins = try? JSONDecoder().decode([Coin].self, from: data) else {
                throw CoinError.serverError
            }
            self.coins.append(contentsOf: coins)
        }catch{
            self.error = error
        }       
        print(coins)
    }
    
    func loadData(){
        Task(priority: .medium){
           try await fetchCoinAsync()
        }
    }

}
